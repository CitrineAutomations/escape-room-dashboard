{
  "name": "Escape Room AI Assistant - Simple",
  "nodes": [
    {
      "parameters": {
        "path": "9437ada2-f85f-4dc0-8294-b2e2d9ff1ea6"
      },
      "id": "webhook-node",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300],
      "webhookId": "9437ada2-f85f-4dc0-8294-b2e2d9ff1ea6"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.query }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "validate-node",
      "name": "Validate Input",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [350, 300]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4o-mini"
            },
            {
              "name": "messages",
              "value": "={{ [{\"role\": \"system\", \"content\": \"You are an AI assistant that converts natural language questions about escape room business data into SQL queries. You have access to the following database schema:\\n\\n**Tables:**\\n1. **Room Slots** - Contains booking data with columns:\\n   - room_id (text): Unique room identifier\\n   - room_name (text): Name of the escape room\\n   - business_name (text): Business name (Cracked IT, Green Light Escape, iEscape Rooms, The Exit Games)\\n   - booking_date (date): Date of the slot\\n   - hour (time): Time slot\\n   - available_slots (integer): Number of available slots\\n   - is_available (boolean): Whether the slot is available\\n   - scrape_timestamp (timestamp): When data was collected\\n   - scrape_id (text): Unique scrape identifier\\n\\n2. **Business Location** - Contains business info:\\n   - business_name (text): Business name\\n   - business_id (text): Unique business identifier\\n\\n**Business Names (exact matching required):**\\n- \\\"Cracked IT\\\" (also appears as \\\"Cracked It\\\")\\n- \\\"Green Light Escape\\\"\\n- \\\"iEscape Rooms\\\"\\n- \\\"The Exit Games\\\" (may have tab character)\\n\\n**Instructions:**\\n1. Convert the user's natural language question into a PostgreSQL query\\n2. Use proper PostgreSQL syntax\\n3. Focus on the Room Slots table for most queries\\n4. For date ranges, use DATE() function or proper date comparisons\\n5. Always use the latest scrape data (MAX(scrape_timestamp) or recent dates)\\n6. Return only the SQL query without explanation unless specifically asked\\n7. For business name filtering, use ILIKE for flexible matching\\n\\nRespond with just the SQL query that answers their question.\"}, {\"role\": \"user\", \"content\": $json.query}] }}"
            },
            {
              "name": "temperature",
              "value": "0.3"
            },
            {
              "name": "max_tokens",
              "value": "1000"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "openai-request",
      "name": "Generate SQL Query",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [500, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "openai-header-auth",
          "name": "OpenAI API Key"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract SQL query from OpenAI response\nconst sqlQuery = $input.item.json.choices[0].message.content.trim();\n\nreturn {\n  sql_query: sqlQuery\n};"
      },
      "id": "extract-sql",
      "name": "Extract SQL",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.sql_query }}"
      },
      "id": "supabase-execute",
      "name": "Execute Query",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [800, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-creds",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4o-mini"
            },
            {
              "name": "messages",
              "value": "={{ [{\"role\": \"system\", \"content\": \"You are an AI assistant that interprets database query results for escape room business owners. Take the SQL query results and format them into a clear, business-friendly response. Provide insights and analysis where appropriate. Use proper formatting with bullet points, numbers, and clear structure. Include relevant business metrics and percentages. Highlight key findings and trends. Suggest actionable insights when possible.\\n\\nContext: The user asked: \\\"\" + $node['Webhook'].json.query + \"\\\"\\nSQL Query Used: \" + $node['Extract SQL'].json.sql_query + \"\\nQuery Results: \" + JSON.stringify($json) + \"\\n\\nProvide a comprehensive, business-focused interpretation of these results.\"}] }}"
            },
            {
              "name": "temperature",
              "value": "0.7"
            },
            {
              "name": "max_tokens",
              "value": "1500"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "format-response",
      "name": "Format Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [950, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "openai-header-auth",
          "name": "OpenAI API Key"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"query\": $node['Webhook'].json.query,\n  \"sql_query\": $node['Extract SQL'].json.sql_query,\n  \"raw_data\": $node['Execute Query'].json,\n  \"response\": $json.choices[0].message.content,\n  \"timestamp\": new Date().toISOString(),\n  \"data_points\": $node['Execute Query'].json.length || 0\n} }}"
      },
      "id": "final-response",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1100, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": false,\n  \"query\": $node['Webhook'].json.query || 'Invalid query',\n  \"error\": 'Query validation failed - please provide a valid question',\n  \"response\": 'I need a valid question to help you analyze your escape room data. Please try asking something like: What is the utilization rate for Green Light Escape this week?',\n  \"timestamp\": new Date().toISOString()\n} }}"
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [500, 450]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Validate Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input": {
      "main": [
        [
          {
            "node": "Generate SQL Query",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate SQL Query": {
      "main": [
        [
          {
            "node": "Extract SQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract SQL": {
      "main": [
        [
          {
            "node": "Execute Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Query": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1"
} 